# Config for single device full finetuning in full_finetune_single_device.py
# using a Llama3 8B Instruct model
#
# This config assumes that you've run the following command before launching
# this run:
#   tune download meta-llama/Meta-Llama-3-8B-Instruct --output-dir /tmp/Meta-Llama-3-8B-Instruct --ignore-patterns "*.safetensors" --hf-token <HF_TOKEN>
#
# The default config uses an optimizer from bitsandbytes. If you do not have it installed,
# you can install it with
#   pip install bitsandbytes
#
# To launch on a single device, run the following command from root:
#   tune run full_finetune_single_device --config llama3/8B_full_single_device
#
# You can add specific overrides through the command line. For example
# to override the checkpointer directory while launching training
# you can run:
#   tune run full_finetune_single_device --config llama3/8B_full_single_device checkpointer.checkpoint_dir=<YOUR_CHECKPOINT_DIR>
#
# This config works only for training on single device.

model_path: /scratch/gpfs/jiatongy/.cache/meta-llama/Meta-Llama-3-8B-Instruct
output_dir: /scratch/gpfs/jiatongy/code-skill-mix/sft/models/Meta-Llama-3-8B-Instruct/best_of_n_full # /tmp may be deleted by your system. Change it to your preference.

# Tokenizer
tokenizer:
  _component_: torchtune.models.llama3.llama3_tokenizer
  path: ${model_path}/original/tokenizer.model
  max_seq_len: null

# Dataset
dataset:
  _component_: torchtune.datasets.chat_dataset
  data_files: /scratch/gpfs/jiatongy/code-skill-mix/training_data/core/best_of_n.json
  conversation_column: conversations
  packed: False  # True increases speed
  conversation_style: openai
  source: json
  train_on_input: False
seed: null
shuffle: True

# Model Arguments
model:
  _component_: torchtune.models.llama3.llama3_8b

checkpointer:
  _component_: torchtune.training.FullModelMetaCheckpointer
  checkpoint_dir: ${model_path}/original/
  # checkpoint_dir: /tmp/Meta-Llama-3-8B-Instruct/original/
  checkpoint_files: [
    consolidated.00.pth
  ]
  recipe_checkpoint: null
  output_dir: ${output_dir}
  model_type: LLAMA3
resume_from_checkpoint: False

# Fine-tuning arguments
batch_size: 2
epochs: 1
optimizer:
  _component_: bitsandbytes.optim.PagedAdamW8bit
  lr: 1e-5
lr_scheduler:
  _component_: torchtune.training.lr_schedulers.get_cosine_schedule_with_warmup
  num_warmup_steps: 100
loss:
  _component_: torchtune.modules.loss.CEWithChunkedOutputLoss
max_steps_per_epoch: null
gradient_accumulation_steps: 16  # Use to increase effective batch size
optimizer_in_bwd: False  # True saves memory. Requires gradient_accumulation_steps=1
compile: False  # torch.compile the model + loss, True increases speed + decreases memory

# Training environment
device: cuda

# Reduced precision
dtype: bf16

# Logging
metric_logger:
  # _component_: torchtune.training.metric_logging.DiskLogger
  # log_dir: ${output_dir}/logs
  _component_: torchtune.training.metric_logging.WandBLogger
  # the W&B project to log to
  project: torchtune
log_every_n_steps: 1
log_peak_memory_stats: True
